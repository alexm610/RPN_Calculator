0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Dec 06 19:00:07 2022
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _delay
0000             28            public _LCD2print
0000             29            public _LCD2_4BIT
0000             30            public _WriteCommand2
0000             31            public _WriteData2
0000             32            public _LCD2_byte
0000             33            public _LCD2_pulse
0000             34            public _LCDprint
0000             35            public _LCD_4BIT
0000             36            public _WriteCommand
0000             37            public _WriteData
0000             38            public _LCD_byte
0000             39            public _LCD_pulse
0000             40            public _waitms
0000             41            public _wait_us
0000             42            public _GetADC
0000             43            public _SPIWrite
0000             44            public __c51_external_startup
0000             45            public _LCD2print_PARM_3
0000             46            public _LCDprint_PARM_3
0000             47            public _LCD2print_PARM_2
0000             48            public _LCDprint_PARM_2
0000             49   ;--------------------------------------------------------
0000             50   ; Special Function Registers
0000             51   ;--------------------------------------------------------
0000             52   _ACC            DATA 0xe0
0000             53   _B              DATA 0xf0
0000             54   _PSW            DATA 0xd0
0000             55   _SP             DATA 0x81
0000             56   _SPX            DATA 0xef
0000             57   _DPL            DATA 0x82
0000             58   _DPH            DATA 0x83
0000             59   _DPLB           DATA 0xd4
0000             60   _DPHB           DATA 0xd5
0000             61   _PAGE           DATA 0xf6
0000             62   _AX             DATA 0xe1
0000             63   _BX             DATA 0xf7
0000             64   _DSPR           DATA 0xe2
0000             65   _FIRD           DATA 0xe3
0000             66   _MACL           DATA 0xe4
0000             67   _MACH           DATA 0xe5
0000             68   _PCON           DATA 0x87
0000             69   _AUXR           DATA 0x8e
0000             70   _AUXR1          DATA 0xa2
0000             71   _DPCF           DATA 0xa1
0000             72   _CKRL           DATA 0x97
0000             73   _CKCKON0        DATA 0x8f
0000             74   _CKCKON1        DATA 0xaf
0000             75   _CKSEL          DATA 0x85
0000             76   _CLKREG         DATA 0xae
0000             77   _OSCCON         DATA 0x85
0000             78   _IE             DATA 0xa8
0000             79   _IEN0           DATA 0xa8
0000             80   _IEN1           DATA 0xb1
0000             81   _IPH0           DATA 0xb7
0000             82   _IP             DATA 0xb8
0000             83   _IPL0           DATA 0xb8
0000             84   _IPH1           DATA 0xb3
0000             85   _IPL1           DATA 0xb2
0000             86   _P0             DATA 0x80
0000             87   _P1             DATA 0x90
0000             88   _P2             DATA 0xa0
0000             89   _P3             DATA 0xb0
0000             90   _P4             DATA 0xc0
0000             91   _P0M0           DATA 0xe6
0000             92   _P0M1           DATA 0xe7
0000             93   _P1M0           DATA 0xd6
0000             94   _P1M1           DATA 0xd7
0000             95   _P2M0           DATA 0xce
0000             96   _P2M1           DATA 0xcf
0000             97   _P3M0           DATA 0xc6
0000             98   _P3M1           DATA 0xc7
0000             99   _P4M0           DATA 0xbe
0000            100   _P4M1           DATA 0xbf
0000            101   _SCON           DATA 0x98
0000            102   _SBUF           DATA 0x99
0000            103   _SADEN          DATA 0xb9
0000            104   _SADDR          DATA 0xa9
0000            105   _BDRCON         DATA 0x9b
0000            106   _BRL            DATA 0x9a
0000            107   _TCON           DATA 0x88
0000            108   _TMOD           DATA 0x89
0000            109   _TCONB          DATA 0x91
0000            110   _TL0            DATA 0x8a
0000            111   _TH0            DATA 0x8c
0000            112   _TL1            DATA 0x8b
0000            113   _TH1            DATA 0x8d
0000            114   _RL0            DATA 0xf2
0000            115   _RH0            DATA 0xf4
0000            116   _RL1            DATA 0xf3
0000            117   _RH1            DATA 0xf5
0000            118   _WDTRST         DATA 0xa6
0000            119   _WDTPRG         DATA 0xa7
0000            120   _T2CON          DATA 0xc8
0000            121   _T2MOD          DATA 0xc9
0000            122   _RCAP2H         DATA 0xcb
0000            123   _RCAP2L         DATA 0xca
0000            124   _TH2            DATA 0xcd
0000            125   _TL2            DATA 0xcc
0000            126   _SPCON          DATA 0xc3
0000            127   _SPSTA          DATA 0xc4
0000            128   _SPDAT          DATA 0xc5
0000            129   _SSCON          DATA 0x93
0000            130   _SSCS           DATA 0x94
0000            131   _SSDAT          DATA 0x95
0000            132   _SSADR          DATA 0x96
0000            133   _KBLS           DATA 0x9c
0000            134   _KBE            DATA 0x9d
0000            135   _KBF            DATA 0x9e
0000            136   _KBMOD          DATA 0x9f
0000            137   _BMSEL          DATA 0x92
0000            138   _FCON           DATA 0xd1
0000            139   _EECON          DATA 0xd2
0000            140   _ACSRA          DATA 0xa3
0000            141   _ACSRB          DATA 0xab
0000            142   _AREF           DATA 0xbd
0000            143   _DADC           DATA 0xa4
0000            144   _DADI           DATA 0xa5
0000            145   _DADL           DATA 0xac
0000            146   _DADH           DATA 0xad
0000            147   _CCON           DATA 0xd8
0000            148   _CMOD           DATA 0xd9
0000            149   _CL             DATA 0xe9
0000            150   _CH             DATA 0xf9
0000            151   _CCAPM0         DATA 0xda
0000            152   _CCAPM1         DATA 0xdb
0000            153   _CCAPM2         DATA 0xdc
0000            154   _CCAPM3         DATA 0xdd
0000            155   _CCAPM4         DATA 0xde
0000            156   _CCAP0H         DATA 0xfa
0000            157   _CCAP1H         DATA 0xfb
0000            158   _CCAP2H         DATA 0xfc
0000            159   _CCAP3H         DATA 0xfd
0000            160   _CCAP4H         DATA 0xfe
0000            161   _CCAP0L         DATA 0xea
0000            162   _CCAP1L         DATA 0xeb
0000            163   _CCAP2L         DATA 0xec
0000            164   _CCAP3L         DATA 0xed
0000            165   _CCAP4L         DATA 0xee
0000            166   ;--------------------------------------------------------
0000            167   ; special function bits
0000            168   ;--------------------------------------------------------
0000            169   _ACC_0          BIT 0xe0
0000            170   _ACC_1          BIT 0xe1
0000            171   _ACC_2          BIT 0xe2
0000            172   _ACC_3          BIT 0xe3
0000            173   _ACC_4          BIT 0xe4
0000            174   _ACC_5          BIT 0xe5
0000            175   _ACC_6          BIT 0xe6
0000            176   _ACC_7          BIT 0xe7
0000            177   _B_0            BIT 0xf0
0000            178   _B_1            BIT 0xf1
0000            179   _B_2            BIT 0xf2
0000            180   _B_3            BIT 0xf3
0000            181   _B_4            BIT 0xf4
0000            182   _B_5            BIT 0xf5
0000            183   _B_6            BIT 0xf6
0000            184   _B_7            BIT 0xf7
0000            185   _P              BIT 0xd0
0000            186   _F1             BIT 0xd1
0000            187   _OV             BIT 0xd2
0000            188   _RS0            BIT 0xd3
0000            189   _RS1            BIT 0xd4
0000            190   _F0             BIT 0xd5
0000            191   _AC             BIT 0xd6
0000            192   _CY             BIT 0xd7
0000            193   _EX0            BIT 0xa8
0000            194   _ET0            BIT 0xa9
0000            195   _EX1            BIT 0xaa
0000            196   _ET1            BIT 0xab
0000            197   _ES             BIT 0xac
0000            198   _ET2            BIT 0xad
0000            199   _EC             BIT 0xae
0000            200   _EA             BIT 0xaf
0000            201   _PX0            BIT 0xb8
0000            202   _PT0            BIT 0xb9
0000            203   _PX1            BIT 0xba
0000            204   _PT1            BIT 0xbb
0000            205   _PS             BIT 0xbc
0000            206   _PT2            BIT 0xbd
0000            207   _IP0D           BIT 0xbf
0000            208   _PPCL           BIT 0xbe
0000            209   _PT2L           BIT 0xbd
0000            210   _PLS            BIT 0xbc
0000            211   _PT1L           BIT 0xbb
0000            212   _PX1L           BIT 0xba
0000            213   _PT0L           BIT 0xb9
0000            214   _PX0L           BIT 0xb8
0000            215   _P0_0           BIT 0x80
0000            216   _P0_1           BIT 0x81
0000            217   _P0_2           BIT 0x82
0000            218   _P0_3           BIT 0x83
0000            219   _P0_4           BIT 0x84
0000            220   _P0_5           BIT 0x85
0000            221   _P0_6           BIT 0x86
0000            222   _P0_7           BIT 0x87
0000            223   _P1_0           BIT 0x90
0000            224   _P1_1           BIT 0x91
0000            225   _P1_2           BIT 0x92
0000            226   _P1_3           BIT 0x93
0000            227   _P1_4           BIT 0x94
0000            228   _P1_5           BIT 0x95
0000            229   _P1_6           BIT 0x96
0000            230   _P1_7           BIT 0x97
0000            231   _P2_0           BIT 0xa0
0000            232   _P2_1           BIT 0xa1
0000            233   _P2_2           BIT 0xa2
0000            234   _P2_3           BIT 0xa3
0000            235   _P2_4           BIT 0xa4
0000            236   _P2_5           BIT 0xa5
0000            237   _P2_6           BIT 0xa6
0000            238   _P2_7           BIT 0xa7
0000            239   _P3_0           BIT 0xb0
0000            240   _P3_1           BIT 0xb1
0000            241   _P3_2           BIT 0xb2
0000            242   _P3_3           BIT 0xb3
0000            243   _P3_4           BIT 0xb4
0000            244   _P3_5           BIT 0xb5
0000            245   _P3_6           BIT 0xb6
0000            246   _P3_7           BIT 0xb7
0000            247   _RXD            BIT 0xb0
0000            248   _TXD            BIT 0xb1
0000            249   _INT0           BIT 0xb2
0000            250   _INT1           BIT 0xb3
0000            251   _T0             BIT 0xb4
0000            252   _T1             BIT 0xb5
0000            253   _WR             BIT 0xb6
0000            254   _RD             BIT 0xb7
0000            255   _P4_0           BIT 0xc0
0000            256   _P4_1           BIT 0xc1
0000            257   _P4_2           BIT 0xc2
0000            258   _P4_3           BIT 0xc3
0000            259   _P4_4           BIT 0xc4
0000            260   _P4_5           BIT 0xc5
0000            261   _P4_6           BIT 0xc6
0000            262   _P4_7           BIT 0xc7
0000            263   _RI             BIT 0x98
0000            264   _TI             BIT 0x99
0000            265   _RB8            BIT 0x9a
0000            266   _TB8            BIT 0x9b
0000            267   _REN            BIT 0x9c
0000            268   _SM2            BIT 0x9d
0000            269   _SM1            BIT 0x9e
0000            270   _SM0            BIT 0x9f
0000            271   _IT0            BIT 0x88
0000            272   _IE0            BIT 0x89
0000            273   _IT1            BIT 0x8a
0000            274   _IE1            BIT 0x8b
0000            275   _TR0            BIT 0x8c
0000            276   _TF0            BIT 0x8d
0000            277   _TR1            BIT 0x8e
0000            278   _TF1            BIT 0x8f
0000            279   _CP_RL2         BIT 0xc8
0000            280   _C_T2           BIT 0xc9
0000            281   _TR2            BIT 0xca
0000            282   _EXEN2          BIT 0xcb
0000            283   _TCLK           BIT 0xcc
0000            284   _RCLK           BIT 0xcd
0000            285   _EXF2           BIT 0xce
0000            286   _TF2            BIT 0xcf
0000            287   _CF             BIT 0xdf
0000            288   _CR             BIT 0xde
0000            289   _CCF4           BIT 0xdc
0000            290   _CCF3           BIT 0xdb
0000            291   _CCF2           BIT 0xda
0000            292   _CCF1           BIT 0xd9
0000            293   _CCF0           BIT 0xd8
0000            294   ;--------------------------------------------------------
0000            295   ; overlayable register banks
0000            296   ;--------------------------------------------------------
0000            297            rbank0 segment data overlay
0000            298   ;--------------------------------------------------------
0000            299   ; internal ram data
0000            300   ;--------------------------------------------------------
0000            301            rseg R_DSEG
0000            302   _LCDprint_PARM_2:
0000            303            ds 1
0001            304   _LCD2print_PARM_2:
0001            305            ds 1
0002            306   ;--------------------------------------------------------
0002            307   ; overlayable items in internal ram 
0002            308   ;--------------------------------------------------------
0000            309            rseg    R_OSEG
0000            310            rseg    R_OSEG
0000            311   ;--------------------------------------------------------
0000            312   ; indirectly addressable internal ram data
0000            313   ;--------------------------------------------------------
0000            314            rseg R_ISEG
0000            315   ;--------------------------------------------------------
0000            316   ; absolute internal ram data
0000            317   ;--------------------------------------------------------
0000            318            DSEG
0000            319   ;--------------------------------------------------------
0000            320   ; bit data
0000            321   ;--------------------------------------------------------
0000            322            rseg R_BSEG
0000            323   _LCDprint_PARM_3:
0000            324            DBIT    1
0001            325   _LCD2print_PARM_3:
0001            326            DBIT    1
0002            327   ;--------------------------------------------------------
0002            328   ; paged external ram data
0002            329   ;--------------------------------------------------------
0000            330            rseg R_PSEG
0000            331   ;--------------------------------------------------------
0000            332   ; external ram data
0000            333   ;--------------------------------------------------------
0000            334            rseg R_XSEG
0000            335   ;--------------------------------------------------------
0000            336   ; absolute external ram data
0000            337   ;--------------------------------------------------------
0000            338            XSEG
0000            339   ;--------------------------------------------------------
0000            340   ; external initialized ram data
0000            341   ;--------------------------------------------------------
0000            342            rseg R_IXSEG
0000            343            rseg R_HOME
0000            344            rseg R_GSINIT
0000            345            rseg R_CSEG
0000            346   ;--------------------------------------------------------
0000            347   ; Reset entry point and interrupt vectors
0000            348   ;--------------------------------------------------------
0000            349            CSEG at 0x0000
0000 020000     350            ljmp    _crt0
0003            351   ;--------------------------------------------------------
0003            352   ; global & static initialisations
0003            353   ;--------------------------------------------------------
0000            354            rseg R_HOME
0000            355            rseg R_GSINIT
0000            356            rseg R_GSINIT
0000            357   ;--------------------------------------------------------
0000            358   ; data variables initialization
0000            359   ;--------------------------------------------------------
0000            360            rseg R_DINIT
0000            361            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            362   ;--------------------------------------------------------
0000            363   ; code
0000            364   ;--------------------------------------------------------
0000            365            rseg R_CSEG
0000            366   ;------------------------------------------------------------
0000            367   ;Allocation info for local variables in function '_c51_external_startup'
0000            368   ;------------------------------------------------------------
0000            369   ;------------------------------------------------------------
0000            370   ;        initialize.h:30: unsigned char _c51_external_startup(void)
0000            371   ;        -----------------------------------------
0000            372   ;         function _c51_external_startup
0000            373   ;        -----------------------------------------
0000            374   __c51_external_startup:
0000            375            using   0
0000            376   ;        initialize.h:33: P0M0=0; P0M1=0;
0000 75E600     377            mov     _P0M0,#0x00
0003 75E700     378            mov     _P0M1,#0x00
0006            379   ;        initialize.h:34: P1M0=0; P1M1=0;
0006 75D600     380            mov     _P1M0,#0x00
0009 75D700     381            mov     _P1M1,#0x00
000C            382   ;        initialize.h:35: P2M0=0; P2M1=0;
000C 75CE00     383            mov     _P2M0,#0x00
000F 75CF00     384            mov     _P2M1,#0x00
0012            385   ;        initialize.h:36: P3M0=0; P3M1=0;
0012 75C600     386            mov     _P3M0,#0x00
0015 75C700     387            mov     _P3M1,#0x00
0018            388   ;        initialize.h:39: PCON|=0x80;
0018 438780     389            orl     _PCON,#0x80
001B            390   ;        initialize.h:40: SCON = 0x52;
001B 759852     391            mov     _SCON,#0x52
001E            392   ;        initialize.h:41: BDRCON=0;
001E 759B00     393            mov     _BDRCON,#0x00
0021            394   ;        initialize.h:42: BRL=BRG_VAL;
0021 759AF4     395            mov     _BRL,#0xF4
0024            396   ;        initialize.h:43: BDRCON=BRR|TBCK|RBCK|SPD;
0024 759B1E     397            mov     _BDRCON,#0x1E
0027            398   ;        initialize.h:45: CLKREG=0x00; // TPS=0000B
0027 75AE00     399            mov     _CLKREG,#0x00
002A            400   ;        initialize.h:47: return 0;
002A 758200     401            mov     dpl,#0x00
002D 22         402            ret
002E            403   ;------------------------------------------------------------
002E            404   ;Allocation info for local variables in function 'SPIWrite'
002E            405   ;------------------------------------------------------------
002E            406   ;out_byte                  Allocated to registers 
002E            407   ;------------------------------------------------------------
002E            408   ;        initialize.h:77: unsigned char SPIWrite(unsigned char out_byte)
002E            409   ;        -----------------------------------------
002E            410   ;         function SPIWrite
002E            411   ;        -----------------------------------------
002E            412   _SPIWrite:
002E 8582E0     413            mov     _ACC,dpl
0031            414   ;        initialize.h:82: BB_MOSI=ACC_7; BB_SCLK=1; B_7=BB_MISO; BB_SCLK=0;
0031 A2E7       415            mov     c,_ACC_7
0033 92A1       416            mov     _P2_1,c
0035 D2A3       417            setb    _P2_3
0037 A2A2       418            mov     c,_P2_2
0039 92F7       419            mov     _B_7,c
003B C2A3       420            clr     _P2_3
003D            421   ;        initialize.h:83: BB_MOSI=ACC_6; BB_SCLK=1; B_6=BB_MISO; BB_SCLK=0;
003D A2E6       422            mov     c,_ACC_6
003F 92A1       423            mov     _P2_1,c
0041 D2A3       424            setb    _P2_3
0043 A2A2       425            mov     c,_P2_2
0045 92F6       426            mov     _B_6,c
0047 C2A3       427            clr     _P2_3
0049            428   ;        initialize.h:84: BB_MOSI=ACC_5; BB_SCLK=1; B_5=BB_MISO; BB_SCLK=0;
0049 A2E5       429            mov     c,_ACC_5
004B 92A1       430            mov     _P2_1,c
004D D2A3       431            setb    _P2_3
004F A2A2       432            mov     c,_P2_2
0051 92F5       433            mov     _B_5,c
0053 C2A3       434            clr     _P2_3
0055            435   ;        initialize.h:85: BB_MOSI=ACC_4; BB_SCLK=1; B_4=BB_MISO; BB_SCLK=0;
0055 A2E4       436            mov     c,_ACC_4
0057 92A1       437            mov     _P2_1,c
0059 D2A3       438            setb    _P2_3
005B A2A2       439            mov     c,_P2_2
005D 92F4       440            mov     _B_4,c
005F C2A3       441            clr     _P2_3
0061            442   ;        initialize.h:86: BB_MOSI=ACC_3; BB_SCLK=1; B_3=BB_MISO; BB_SCLK=0;
0061 A2E3       443            mov     c,_ACC_3
0063 92A1       444            mov     _P2_1,c
0065 D2A3       445            setb    _P2_3
0067 A2A2       446            mov     c,_P2_2
0069 92F3       447            mov     _B_3,c
006B C2A3       448            clr     _P2_3
006D            449   ;        initialize.h:87: BB_MOSI=ACC_2; BB_SCLK=1; B_2=BB_MISO; BB_SCLK=0;
006D A2E2       450            mov     c,_ACC_2
006F 92A1       451            mov     _P2_1,c
0071 D2A3       452            setb    _P2_3
0073 A2A2       453            mov     c,_P2_2
0075 92F2       454            mov     _B_2,c
0077 C2A3       455            clr     _P2_3
0079            456   ;        initialize.h:88: BB_MOSI=ACC_1; BB_SCLK=1; B_1=BB_MISO; BB_SCLK=0;
0079 A2E1       457            mov     c,_ACC_1
007B 92A1       458            mov     _P2_1,c
007D D2A3       459            setb    _P2_3
007F A2A2       460            mov     c,_P2_2
0081 92F1       461            mov     _B_1,c
0083 C2A3       462            clr     _P2_3
0085            463   ;        initialize.h:89: BB_MOSI=ACC_0; BB_SCLK=1; B_0=BB_MISO; BB_SCLK=0;
0085 A2E0       464            mov     c,_ACC_0
0087 92A1       465            mov     _P2_1,c
0089 D2A3       466            setb    _P2_3
008B A2A2       467            mov     c,_P2_2
008D 92F0       468            mov     _B_0,c
008F C2A3       469            clr     _P2_3
0091            470   ;        initialize.h:91: return B;
0091 85F082     471            mov     dpl,_B
0094 22         472            ret
0095            473   ;------------------------------------------------------------
0095            474   ;Allocation info for local variables in function 'GetADC'
0095            475   ;------------------------------------------------------------
0095            476   ;channel                   Allocated to registers r2 
0095            477   ;adc                       Allocated to registers r3 r4 
0095            478   ;spid                      Allocated to registers r2 
0095            479   ;------------------------------------------------------------
0095            480   ;        initialize.h:95: unsigned int volatile GetADC(unsigned char channel)
0095            481   ;        -----------------------------------------
0095            482   ;         function GetADC
0095            483   ;        -----------------------------------------
0095            484   _GetADC:
0095 AA82       485            mov     r2,dpl
0097            486   ;        initialize.h:100: ADC_CE=0; // Activate the MCP3008 ADC.
0097 C2A0       487            clr     _P2_0
0099            488   ;        initialize.h:102: SPIWrite(0x01);// Send the start bit.
0099 758201     489            mov     dpl,#0x01
009C C002       490            push    ar2
009E 120000     491            lcall   _SPIWrite
00A1 D002       492            pop     ar2
00A3            493   ;        initialize.h:103: spid=SPIWrite((channel*0x10)|0x80);   //Send single/diff* bit, D2, D1, and D0 bits.
00A3 EA         494            mov     a,r2
00A4 C4         495            swap    a
00A5 54F0       496            anl     a,#0xf0
00A7 FA         497            mov     r2,a
00A8 7480       498            mov     a,#0x80
00AA 4A         499            orl     a,r2
00AB F582       500            mov     dpl,a
00AD 120000     501            lcall   _SPIWrite
00B0 AA82       502            mov     r2,dpl
00B2            503   ;        initialize.h:104: adc=((spid & 0x03)*0x100);// spid has the two most significant bits of the result.
00B2 7403       504            mov     a,#0x03
00B4 5A         505            anl     a,r2
00B5 FC         506            mov     r4,a
00B6 7B00       507            mov     r3,#0x00
00B8            508   ;        initialize.h:105: spid=SPIWrite(0x00);// It doesn't matter what we send now.
00B8 758200     509            mov     dpl,#0x00
00BB C003       510            push    ar3
00BD C004       511            push    ar4
00BF 120000     512            lcall   _SPIWrite
00C2 AA82       513            mov     r2,dpl
00C4 D004       514            pop     ar4
00C6 D003       515            pop     ar3
00C8            516   ;        initialize.h:106: adc+=spid;// spid contains the low part of the result. 
00C8 7D00       517            mov     r5,#0x00
00CA EA         518            mov     a,r2
00CB 2B         519            add     a,r3
00CC FB         520            mov     r3,a
00CD ED         521            mov     a,r5
00CE 3C         522            addc    a,r4
00CF FC         523            mov     r4,a
00D0            524   ;        initialize.h:108: ADC_CE=1; // Deactivate the MCP3008 ADC.
00D0 D2A0       525            setb    _P2_0
00D2            526   ;        initialize.h:110: return adc;
00D2 8B82       527            mov     dpl,r3
00D4 8C83       528            mov     dph,r4
00D6 22         529            ret
00D7            530   ;------------------------------------------------------------
00D7            531   ;Allocation info for local variables in function 'wait_us'
00D7            532   ;------------------------------------------------------------
00D7            533   ;x                         Allocated to registers r2 
00D7            534   ;j                         Allocated to registers r2 r3 
00D7            535   ;------------------------------------------------------------
00D7            536   ;        initialize.h:118: void wait_us (unsigned char x)
00D7            537   ;        -----------------------------------------
00D7            538   ;         function wait_us
00D7            539   ;        -----------------------------------------
00D7            540   _wait_us:
00D7 AA82       541            mov     r2,dpl
00D9            542   ;        initialize.h:122: TR0=0; // Stop timer 0
00D9 C28C       543            clr     _TR0
00DB            544   ;        initialize.h:123: TMOD&=0xf0; // Clear the configuration bits for timer 0
00DB 5389F0     545            anl     _TMOD,#0xF0
00DE            546   ;        initialize.h:124: TMOD|=0x01; // Mode 1: 16-bit timer
00DE 438901     547            orl     _TMOD,#0x01
00E1            548   ;        initialize.h:126: if(x>5) x-=5; // Subtract the overhead
00E1 EA         549            mov     a,r2
00E2 24FA       550            add     a,#0xff - 0x05
00E4 5000       551            jnc     L005002?
00E6 EA         552            mov     a,r2
00E7 24FB       553            add     a,#0xfb
00E9 FA         554            mov     r2,a
00EA 8000       555            sjmp    L005003?
00EC            556   L005002?:
00EC            557   ;        initialize.h:127: else x=1;
00EC 7A01       558            mov     r2,#0x01
00EE            559   L005003?:
00EE            560   ;        initialize.h:129: j=-ONE_USEC*x;
00EE 8A00       561            mov     __mullong_PARM_2,r2
00F0 750100     562            mov     (__mullong_PARM_2 + 1),#0x00
00F3 750200     563            mov     (__mullong_PARM_2 + 2),#0x00
00F6 750300     564            mov     (__mullong_PARM_2 + 3),#0x00
00F9 90FFEA     565            mov     dptr,#0xFFEA
00FC 74FF       566            mov     a,#0xFF
00FE F5F0       567            mov     b,a
0100 120000     568            lcall   __mullong
0103 AA82       569            mov     r2,dpl
0105 AB83       570            mov     r3,dph
0107            571   ;        initialize.h:130: TF0=0;
0107 C28D       572            clr     _TF0
0109            573   ;        initialize.h:131: TH0=j/0x100;
0109 8B04       574            mov     ar4,r3
010B 7D00       575            mov     r5,#0x00
010D 8C8C       576            mov     _TH0,r4
010F            577   ;        initialize.h:132: TL0=j%0x100;
010F 7B00       578            mov     r3,#0x00
0111 8A8A       579            mov     _TL0,r2
0113            580   ;        initialize.h:133: TR0=1; // Start timer 0
0113 D28C       581            setb    _TR0
0115            582   ;        initialize.h:134: while(TF0==0); //Wait for overflow
0115            583   L005004?:
0115 308D50     584            jnb     _TF0,L005004?
0118 22         585            ret
0119            586   ;------------------------------------------------------------
0119            587   ;Allocation info for local variables in function 'waitms'
0119            588   ;------------------------------------------------------------
0119            589   ;ms                        Allocated to registers r2 r3 
0119            590   ;j                         Allocated to registers r4 r5 
0119            591   ;k                         Allocated to registers r6 
0119            592   ;------------------------------------------------------------
0119            593   ;        initialize.h:137: void waitms (unsigned int ms)
0119            594   ;        -----------------------------------------
0119            595   ;         function waitms
0119            596   ;        -----------------------------------------
0119            597   _waitms:
0119 AA82       598            mov     r2,dpl
011B AB83       599            mov     r3,dph
011D            600   ;        initialize.h:141: for(j=0; j<ms; j++)
011D 7C00       601            mov     r4,#0x00
011F 7D00       602            mov     r5,#0x00
0121            603   L006005?:
0121 C3         604            clr     c
0122 EC         605            mov     a,r4
0123 9A         606            subb    a,r2
0124 ED         607            mov     a,r5
0125 9B         608            subb    a,r3
0126 5000       609            jnc     L006009?
0128            610   ;        initialize.h:142: for (k=0; k<4; k++) wait_us(250);
0128 7E00       611            mov     r6,#0x00
012A            612   L006001?:
012A BE0450     613            cjne    r6,#0x04,L006018?
012D            614   L006018?:
012D 5000       615            jnc     L006007?
012F 7582FA     616            mov     dpl,#0xFA
0132 C002       617            push    ar2
0134 C003       618            push    ar3
0136 C004       619            push    ar4
0138 C005       620            push    ar5
013A C006       621            push    ar6
013C 120000     622            lcall   _wait_us
013F D006       623            pop     ar6
0141 D005       624            pop     ar5
0143 D004       625            pop     ar4
0145 D003       626            pop     ar3
0147 D002       627            pop     ar2
0149 0E         628            inc     r6
014A 8000       629            sjmp    L006001?
014C            630   L006007?:
014C            631   ;        initialize.h:141: for(j=0; j<ms; j++)
014C 0C         632            inc     r4
014D BC00D0     633            cjne    r4,#0x00,L006005?
0150 0D         634            inc     r5
0151 8000       635            sjmp    L006005?
0153            636   L006009?:
0153 22         637            ret
0154            638   ;------------------------------------------------------------
0154            639   ;Allocation info for local variables in function 'LCD_pulse'
0154            640   ;------------------------------------------------------------
0154            641   ;------------------------------------------------------------
0154            642   ;        initialize.h:145: void LCD_pulse (void)
0154            643   ;        -----------------------------------------
0154            644   ;         function LCD_pulse
0154            645   ;        -----------------------------------------
0154            646   _LCD_pulse:
0154            647   ;        initialize.h:147: LCD_E=1;
0154 D2A4       648            setb    _P2_4
0156            649   ;        initialize.h:148: wait_us(40);
0156 758228     650            mov     dpl,#0x28
0159 120000     651            lcall   _wait_us
015C            652   ;        initialize.h:149: LCD_E=0;
015C C2A4       653            clr     _P2_4
015E 22         654            ret
015F            655   ;------------------------------------------------------------
015F            656   ;Allocation info for local variables in function 'LCD_byte'
015F            657   ;------------------------------------------------------------
015F            658   ;x                         Allocated to registers r2 
015F            659   ;------------------------------------------------------------
015F            660   ;        initialize.h:152: void LCD_byte (unsigned char x)
015F            661   ;        -----------------------------------------
015F            662   ;         function LCD_byte
015F            663   ;        -----------------------------------------
015F            664   _LCD_byte:
015F AA82       665            mov     r2,dpl
0161            666   ;        initialize.h:155: ACC=x; //Send high nible
0161 8AE0       667            mov     _ACC,r2
0163            668   ;        initialize.h:156: LCD_D7=ACC_7;
0163 A2E7       669            mov     c,_ACC_7
0165 92B7       670            mov     _P3_7,c
0167            671   ;        initialize.h:157: LCD_D6=ACC_6;
0167 A2E6       672            mov     c,_ACC_6
0169 92B6       673            mov     _P3_6,c
016B            674   ;        initialize.h:158: LCD_D5=ACC_5;
016B A2E5       675            mov     c,_ACC_5
016D 92B5       676            mov     _P3_5,c
016F            677   ;        initialize.h:159: LCD_D4=ACC_4;
016F A2E4       678            mov     c,_ACC_4
0171 92B4       679            mov     _P3_4,c
0173            680   ;        initialize.h:160: LCD_pulse();
0173 C002       681            push    ar2
0175 120000     682            lcall   _LCD_pulse
0178            683   ;        initialize.h:161: wait_us(40);
0178 758228     684            mov     dpl,#0x28
017B 120000     685            lcall   _wait_us
017E D002       686            pop     ar2
0180            687   ;        initialize.h:162: ACC=x; //Send low nible
0180 8AE0       688            mov     _ACC,r2
0182            689   ;        initialize.h:163: LCD_D7=ACC_3;
0182 A2E3       690            mov     c,_ACC_3
0184 92B7       691            mov     _P3_7,c
0186            692   ;        initialize.h:164: LCD_D6=ACC_2;
0186 A2E2       693            mov     c,_ACC_2
0188 92B6       694            mov     _P3_6,c
018A            695   ;        initialize.h:165: LCD_D5=ACC_1;
018A A2E1       696            mov     c,_ACC_1
018C 92B5       697            mov     _P3_5,c
018E            698   ;        initialize.h:166: LCD_D4=ACC_0;
018E A2E0       699            mov     c,_ACC_0
0190 92B4       700            mov     _P3_4,c
0192            701   ;        initialize.h:167: LCD_pulse();
0192 020000     702            ljmp    _LCD_pulse
0195            703   ;------------------------------------------------------------
0195            704   ;Allocation info for local variables in function 'WriteData'
0195            705   ;------------------------------------------------------------
0195            706   ;x                         Allocated to registers r2 
0195            707   ;------------------------------------------------------------
0195            708   ;        initialize.h:170: void WriteData (unsigned char x)
0195            709   ;        -----------------------------------------
0195            710   ;         function WriteData
0195            711   ;        -----------------------------------------
0195            712   _WriteData:
0195 AA82       713            mov     r2,dpl
0197            714   ;        initialize.h:172: LCD_RS=1;
0197 D2A5       715            setb    _P2_5
0199            716   ;        initialize.h:173: LCD_byte(x);
0199 8A82       717            mov     dpl,r2
019B 120000     718            lcall   _LCD_byte
019E            719   ;        initialize.h:174: waitms(2);
019E 900002     720            mov     dptr,#0x0002
01A1 020000     721            ljmp    _waitms
01A4            722   ;------------------------------------------------------------
01A4            723   ;Allocation info for local variables in function 'WriteCommand'
01A4            724   ;------------------------------------------------------------
01A4            725   ;x                         Allocated to registers r2 
01A4            726   ;------------------------------------------------------------
01A4            727   ;        initialize.h:177: void WriteCommand (unsigned char x)
01A4            728   ;        -----------------------------------------
01A4            729   ;         function WriteCommand
01A4            730   ;        -----------------------------------------
01A4            731   _WriteCommand:
01A4 AA82       732            mov     r2,dpl
01A6            733   ;        initialize.h:179: LCD_RS=0;
01A6 C2A5       734            clr     _P2_5
01A8            735   ;        initialize.h:180: LCD_byte(x);
01A8 8A82       736            mov     dpl,r2
01AA 120000     737            lcall   _LCD_byte
01AD            738   ;        initialize.h:181: waitms(5);
01AD 900005     739            mov     dptr,#0x0005
01B0 020000     740            ljmp    _waitms
01B3            741   ;------------------------------------------------------------
01B3            742   ;Allocation info for local variables in function 'LCD_4BIT'
01B3            743   ;------------------------------------------------------------
01B3            744   ;------------------------------------------------------------
01B3            745   ;        initialize.h:184: void LCD_4BIT (void)
01B3            746   ;        -----------------------------------------
01B3            747   ;         function LCD_4BIT
01B3            748   ;        -----------------------------------------
01B3            749   _LCD_4BIT:
01B3            750   ;        initialize.h:186: LCD_E=0; // Resting state of LCD's enable is zero
01B3 C2A4       751            clr     _P2_4
01B5            752   ;        initialize.h:188: waitms(20);
01B5 900014     753            mov     dptr,#0x0014
01B8 120000     754            lcall   _waitms
01BB            755   ;        initialize.h:190: WriteCommand(0x33);
01BB 758233     756            mov     dpl,#0x33
01BE 120000     757            lcall   _WriteCommand
01C1            758   ;        initialize.h:191: WriteCommand(0x33);
01C1 758233     759            mov     dpl,#0x33
01C4 120000     760            lcall   _WriteCommand
01C7            761   ;        initialize.h:192: WriteCommand(0x32); // Change to 4-bit mode
01C7 758232     762            mov     dpl,#0x32
01CA 120000     763            lcall   _WriteCommand
01CD            764   ;        initialize.h:195: WriteCommand(0x28);
01CD 758228     765            mov     dpl,#0x28
01D0 120000     766            lcall   _WriteCommand
01D3            767   ;        initialize.h:196: WriteCommand(0x0c);
01D3 75820C     768            mov     dpl,#0x0C
01D6 120000     769            lcall   _WriteCommand
01D9            770   ;        initialize.h:197: WriteCommand(0x01); // Clear screen command (takes some time)
01D9 758201     771            mov     dpl,#0x01
01DC 120000     772            lcall   _WriteCommand
01DF            773   ;        initialize.h:198: waitms(20); // Wait for clear screen command to finsih.
01DF 900014     774            mov     dptr,#0x0014
01E2 020000     775            ljmp    _waitms
01E5            776   ;------------------------------------------------------------
01E5            777   ;Allocation info for local variables in function 'LCDprint'
01E5            778   ;------------------------------------------------------------
01E5            779   ;line                      Allocated with name '_LCDprint_PARM_2'
01E5            780   ;string                    Allocated to registers r2 r3 r4 
01E5            781   ;j                         Allocated to registers r5 r6 
01E5            782   ;------------------------------------------------------------
01E5            783   ;        initialize.h:201: void LCDprint(char * string, unsigned char line, bit clear)
01E5            784   ;        -----------------------------------------
01E5            785   ;         function LCDprint
01E5            786   ;        -----------------------------------------
01E5            787   _LCDprint:
01E5 AA82       788            mov     r2,dpl
01E7 AB83       789            mov     r3,dph
01E9 ACF0       790            mov     r4,b
01EB            791   ;        initialize.h:205: WriteCommand(line==2?0xc0:0x80);
01EB 7402       792            mov     a,#0x02
01ED B5D050     793            cjne    a,_LCDprint_PARM_2,L012013?
01F0 7DC0       794            mov     r5,#0xC0
01F2 8000       795            sjmp    L012014?
01F4            796   L012013?:
01F4 7D80       797            mov     r5,#0x80
01F6            798   L012014?:
01F6 8D82       799            mov     dpl,r5
01F8 C002       800            push    ar2
01FA C003       801            push    ar3
01FC C004       802            push    ar4
01FE 120000     803            lcall   _WriteCommand
0201            804   ;        initialize.h:206: waitms(5);
0201 900005     805            mov     dptr,#0x0005
0204 120000     806            lcall   _waitms
0207 D004       807            pop     ar4
0209 D003       808            pop     ar3
020B D002       809            pop     ar2
020D            810   ;        initialize.h:207: for(j=0; string[j]!=0; j++)   WriteData(string[j]);// Write the message
020D 7D00       811            mov     r5,#0x00
020F 7E00       812            mov     r6,#0x00
0211            813   L012003?:
0211 ED         814            mov     a,r5
0212 2A         815            add     a,r2
0213 FF         816            mov     r7,a
0214 EE         817            mov     a,r6
0215 3B         818            addc    a,r3
0216 F8         819            mov     r0,a
0217 8C01       820            mov     ar1,r4
0219 8F82       821            mov     dpl,r7
021B 8883       822            mov     dph,r0
021D 89F0       823            mov     b,r1
021F 120000     824            lcall   __gptrget
0222 FF         825            mov     r7,a
0223 6000       826            jz      L012006?
0225 8F82       827            mov     dpl,r7
0227 C002       828            push    ar2
0229 C003       829            push    ar3
022B C004       830            push    ar4
022D C005       831            push    ar5
022F C006       832            push    ar6
0231 120000     833            lcall   _WriteData
0234 D006       834            pop     ar6
0236 D005       835            pop     ar5
0238 D004       836            pop     ar4
023A D003       837            pop     ar3
023C D002       838            pop     ar2
023E 0D         839            inc     r5
023F BD0050     840            cjne    r5,#0x00,L012003?
0242 0E         841            inc     r6
0243 8000       842            sjmp    L012003?
0245            843   L012006?:
0245            844   ;        initialize.h:208: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0245 30D0D0     845            jnb     _LCDprint_PARM_3,L012011?
0248 8D02       846            mov     ar2,r5
024A 8E03       847            mov     ar3,r6
024C            848   L012007?:
024C C3         849            clr     c
024D EA         850            mov     a,r2
024E 9410       851            subb    a,#0x10
0250 EB         852            mov     a,r3
0251 6480       853            xrl     a,#0x80
0253 9480       854            subb    a,#0x80
0255 5000       855            jnc     L012011?
0257 758220     856            mov     dpl,#0x20
025A C002       857            push    ar2
025C C003       858            push    ar3
025E 120000     859            lcall   _WriteData
0261 D003       860            pop     ar3
0263 D002       861            pop     ar2
0265 0A         862            inc     r2
0266 BA0050     863            cjne    r2,#0x00,L012007?
0269 0B         864            inc     r3
026A 8000       865            sjmp    L012007?
026C            866   L012011?:
026C 22         867            ret
026D            868   ;------------------------------------------------------------
026D            869   ;Allocation info for local variables in function 'LCD2_pulse'
026D            870   ;------------------------------------------------------------
026D            871   ;------------------------------------------------------------
026D            872   ;        initialize.h:211: void LCD2_pulse (void)
026D            873   ;        -----------------------------------------
026D            874   ;         function LCD2_pulse
026D            875   ;        -----------------------------------------
026D            876   _LCD2_pulse:
026D            877   ;        initialize.h:213: LCD2_E=1;
026D D2A7       878            setb    _P2_7
026F            879   ;        initialize.h:214: wait_us(40);
026F 758228     880            mov     dpl,#0x28
0272 120000     881            lcall   _wait_us
0275            882   ;        initialize.h:215: LCD2_E=0;
0275 C2A7       883            clr     _P2_7
0277 22         884            ret
0278            885   ;------------------------------------------------------------
0278            886   ;Allocation info for local variables in function 'LCD2_byte'
0278            887   ;------------------------------------------------------------
0278            888   ;x                         Allocated to registers r2 
0278            889   ;------------------------------------------------------------
0278            890   ;        initialize.h:218: void LCD2_byte (unsigned char x)
0278            891   ;        -----------------------------------------
0278            892   ;         function LCD2_byte
0278            893   ;        -----------------------------------------
0278            894   _LCD2_byte:
0278 AA82       895            mov     r2,dpl
027A            896   ;        initialize.h:221: ACC=x; //Send high nible
027A 8AE0       897            mov     _ACC,r2
027C            898   ;        initialize.h:222: LCD2_D7=ACC_7;
027C A2E7       899            mov     c,_ACC_7
027E 9281       900            mov     _P0_1,c
0280            901   ;        initialize.h:223: LCD2_D6=ACC_6;
0280 A2E6       902            mov     c,_ACC_6
0282 9282       903            mov     _P0_2,c
0284            904   ;        initialize.h:224: LCD2_D5=ACC_5;
0284 A2E5       905            mov     c,_ACC_5
0286 9283       906            mov     _P0_3,c
0288            907   ;        initialize.h:225: LCD2_D4=ACC_4;
0288 A2E4       908            mov     c,_ACC_4
028A 9284       909            mov     _P0_4,c
028C            910   ;        initialize.h:226: LCD2_pulse();
028C C002       911            push    ar2
028E 120000     912            lcall   _LCD2_pulse
0291            913   ;        initialize.h:227: wait_us(40);
0291 758228     914            mov     dpl,#0x28
0294 120000     915            lcall   _wait_us
0297 D002       916            pop     ar2
0299            917   ;        initialize.h:228: ACC=x; //Send low nible
0299 8AE0       918            mov     _ACC,r2
029B            919   ;        initialize.h:229: LCD2_D7=ACC_3;
029B A2E3       920            mov     c,_ACC_3
029D 9281       921            mov     _P0_1,c
029F            922   ;        initialize.h:230: LCD2_D6=ACC_2;
029F A2E2       923            mov     c,_ACC_2
02A1 9282       924            mov     _P0_2,c
02A3            925   ;        initialize.h:231: LCD2_D5=ACC_1;
02A3 A2E1       926            mov     c,_ACC_1
02A5 9283       927            mov     _P0_3,c
02A7            928   ;        initialize.h:232: LCD2_D4=ACC_0;
02A7 A2E0       929            mov     c,_ACC_0
02A9 9284       930            mov     _P0_4,c
02AB            931   ;        initialize.h:233: LCD2_pulse();
02AB 020000     932            ljmp    _LCD2_pulse
02AE            933   ;------------------------------------------------------------
02AE            934   ;Allocation info for local variables in function 'WriteData2'
02AE            935   ;------------------------------------------------------------
02AE            936   ;x                         Allocated to registers r2 
02AE            937   ;------------------------------------------------------------
02AE            938   ;        initialize.h:236: void WriteData2 (unsigned char x)
02AE            939   ;        -----------------------------------------
02AE            940   ;         function WriteData2
02AE            941   ;        -----------------------------------------
02AE            942   _WriteData2:
02AE AA82       943            mov     r2,dpl
02B0            944   ;        initialize.h:238: LCD2_RS=1;
02B0 D2A6       945            setb    _P2_6
02B2            946   ;        initialize.h:239: LCD2_byte(x);
02B2 8A82       947            mov     dpl,r2
02B4 120000     948            lcall   _LCD2_byte
02B7            949   ;        initialize.h:240: waitms(2);
02B7 900002     950            mov     dptr,#0x0002
02BA 020000     951            ljmp    _waitms
02BD            952   ;------------------------------------------------------------
02BD            953   ;Allocation info for local variables in function 'WriteCommand2'
02BD            954   ;------------------------------------------------------------
02BD            955   ;x                         Allocated to registers r2 
02BD            956   ;------------------------------------------------------------
02BD            957   ;        initialize.h:243: void WriteCommand2 (unsigned char x)
02BD            958   ;        -----------------------------------------
02BD            959   ;         function WriteCommand2
02BD            960   ;        -----------------------------------------
02BD            961   _WriteCommand2:
02BD AA82       962            mov     r2,dpl
02BF            963   ;        initialize.h:245: LCD2_RS=0;
02BF C2A6       964            clr     _P2_6
02C1            965   ;        initialize.h:246: LCD2_byte(x);
02C1 8A82       966            mov     dpl,r2
02C3 120000     967            lcall   _LCD2_byte
02C6            968   ;        initialize.h:247: waitms(5);
02C6 900005     969            mov     dptr,#0x0005
02C9 020000     970            ljmp    _waitms
02CC            971   ;------------------------------------------------------------
02CC            972   ;Allocation info for local variables in function 'LCD2_4BIT'
02CC            973   ;------------------------------------------------------------
02CC            974   ;------------------------------------------------------------
02CC            975   ;        initialize.h:250: void LCD2_4BIT (void)
02CC            976   ;        -----------------------------------------
02CC            977   ;         function LCD2_4BIT
02CC            978   ;        -----------------------------------------
02CC            979   _LCD2_4BIT:
02CC            980   ;        initialize.h:252: LCD2_E=0; // Resting state of LCD's enable is zero
02CC C2A7       981            clr     _P2_7
02CE            982   ;        initialize.h:254: waitms(20);
02CE 900014     983            mov     dptr,#0x0014
02D1 120000     984            lcall   _waitms
02D4            985   ;        initialize.h:256: WriteCommand2(0x33);
02D4 758233     986            mov     dpl,#0x33
02D7 120000     987            lcall   _WriteCommand2
02DA            988   ;        initialize.h:257: WriteCommand2(0x33);
02DA 758233     989            mov     dpl,#0x33
02DD 120000     990            lcall   _WriteCommand2
02E0            991   ;        initialize.h:258: WriteCommand2(0x32); // Change to 4-bit mode
02E0 758232     992            mov     dpl,#0x32
02E3 120000     993            lcall   _WriteCommand2
02E6            994   ;        initialize.h:261: WriteCommand2(0x28);
02E6 758228     995            mov     dpl,#0x28
02E9 120000     996            lcall   _WriteCommand2
02EC            997   ;        initialize.h:262: WriteCommand2(0x0);
02EC 758200     998            mov     dpl,#0x00
02EF 120000     999            lcall   _WriteCommand2
02F2           1000   ;        initialize.h:263: WriteCommand2(0x01); // Clear screen command (takes some time)
02F2 758201    1001            mov     dpl,#0x01
02F5 120000    1002            lcall   _WriteCommand2
02F8           1003   ;        initialize.h:264: waitms(20); // Wait for clear screen command to finsih.
02F8 900014    1004            mov     dptr,#0x0014
02FB 020000    1005            ljmp    _waitms
02FE           1006   ;------------------------------------------------------------
02FE           1007   ;Allocation info for local variables in function 'LCD2print'
02FE           1008   ;------------------------------------------------------------
02FE           1009   ;line                      Allocated with name '_LCD2print_PARM_2'
02FE           1010   ;string                    Allocated to registers r2 r3 r4 
02FE           1011   ;j                         Allocated to registers r5 r6 
02FE           1012   ;------------------------------------------------------------
02FE           1013   ;        initialize.h:267: void LCD2print(char * string, unsigned char line, bit clear)
02FE           1014   ;        -----------------------------------------
02FE           1015   ;         function LCD2print
02FE           1016   ;        -----------------------------------------
02FE           1017   _LCD2print:
02FE AA82      1018            mov     r2,dpl
0300 AB83      1019            mov     r3,dph
0302 ACF0      1020            mov     r4,b
0304           1021   ;        initialize.h:271: WriteCommand2(line==2?0xc0:0x80);
0304 7402      1022            mov     a,#0x02
0306 B550D0    1023            cjne    a,_LCD2print_PARM_2,L018013?
0309 7DC0      1024            mov     r5,#0xC0
030B 8000      1025            sjmp    L018014?
030D           1026   L018013?:
030D 7D80      1027            mov     r5,#0x80
030F           1028   L018014?:
030F 8D82      1029            mov     dpl,r5
0311 C002      1030            push    ar2
0313 C003      1031            push    ar3
0315 C004      1032            push    ar4
0317 120000    1033            lcall   _WriteCommand2
031A           1034   ;        initialize.h:272: waitms(5);
031A 900005    1035            mov     dptr,#0x0005
031D 120000    1036            lcall   _waitms
0320 D004      1037            pop     ar4
0322 D003      1038            pop     ar3
0324 D002      1039            pop     ar2
0326           1040   ;        initialize.h:273: for(j=0; string[j]!=0; j++)   WriteData2(string[j]);// Write the message
0326 7D00      1041            mov     r5,#0x00
0328 7E00      1042            mov     r6,#0x00
032A           1043   L018003?:
032A ED        1044            mov     a,r5
032B 2A        1045            add     a,r2
032C FF        1046            mov     r7,a
032D EE        1047            mov     a,r6
032E 3B        1048            addc    a,r3
032F F8        1049            mov     r0,a
0330 8C01      1050            mov     ar1,r4
0332 8F82      1051            mov     dpl,r7
0334 8883      1052            mov     dph,r0
0336 89F0      1053            mov     b,r1
0338 120000    1054            lcall   __gptrget
033B FF        1055            mov     r7,a
033C 6000      1056            jz      L018006?
033E 8F82      1057            mov     dpl,r7
0340 C002      1058            push    ar2
0342 C003      1059            push    ar3
0344 C004      1060            push    ar4
0346 C005      1061            push    ar5
0348 C006      1062            push    ar6
034A 120000    1063            lcall   _WriteData2
034D D006      1064            pop     ar6
034F D005      1065            pop     ar5
0351 D004      1066            pop     ar4
0353 D003      1067            pop     ar3
0355 D002      1068            pop     ar2
0357 0D        1069            inc     r5
0358 BD00D0    1070            cjne    r5,#0x00,L018003?
035B 0E        1071            inc     r6
035C 8000      1072            sjmp    L018003?
035E           1073   L018006?:
035E           1074   ;        initialize.h:274: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData2(' '); // Clear the rest of the line
035E 3050D0    1075            jnb     _LCD2print_PARM_3,L018011?
0361 8D02      1076            mov     ar2,r5
0363 8E03      1077            mov     ar3,r6
0365           1078   L018007?:
0365 C3        1079            clr     c
0366 EA        1080            mov     a,r2
0367 9410      1081            subb    a,#0x10
0369 EB        1082            mov     a,r3
036A 6480      1083            xrl     a,#0x80
036C 9480      1084            subb    a,#0x80
036E 5000      1085            jnc     L018011?
0370 758220    1086            mov     dpl,#0x20
0373 C002      1087            push    ar2
0375 C003      1088            push    ar3
0377 120000    1089            lcall   _WriteData2
037A D003      1090            pop     ar3
037C D002      1091            pop     ar2
037E 0A        1092            inc     r2
037F BA0050    1093            cjne    r2,#0x00,L018007?
0382 0B        1094            inc     r3
0383 8000      1095            sjmp    L018007?
0385           1096   L018011?:
0385 22        1097            ret
0386           1098   ;------------------------------------------------------------
0386           1099   ;Allocation info for local variables in function 'delay'
0386           1100   ;------------------------------------------------------------
0386           1101   ;i                         Allocated to registers r2 r3 
0386           1102   ;j                         Allocated to registers r4 r5 
0386           1103   ;------------------------------------------------------------
0386           1104   ;        initialize.h:277: void delay(void)
0386           1105   ;        -----------------------------------------
0386           1106   ;         function delay
0386           1107   ;        -----------------------------------------
0386           1108   _delay:
0386           1109   ;        initialize.h:280: for(i=0; i<10000; i++)
0386 7A00      1110            mov     r2,#0x00
0388 7B00      1111            mov     r3,#0x00
038A           1112   L019004?:
038A C3        1113            clr     c
038B EA        1114            mov     a,r2
038C 9410      1115            subb    a,#0x10
038E EB        1116            mov     a,r3
038F 6480      1117            xrl     a,#0x80
0391 94A7      1118            subb    a,#0xa7
0393 5000      1119            jnc     L019008?
0395           1120   ;        initialize.h:282: for(j=0; j<10000; j++)
0395 7C10      1121            mov     r4,#0x10
0397 7D27      1122            mov     r5,#0x27
0399           1123   L019003?:
0399 1C        1124            dec     r4
039A BCFF50    1125            cjne    r4,#0xff,L019017?
039D 1D        1126            dec     r5
039E           1127   L019017?:
039E EC        1128            mov     a,r4
039F 4D        1129            orl     a,r5
03A0 7000      1130            jnz     L019003?
03A2           1131   ;        initialize.h:280: for(i=0; i<10000; i++)
03A2 0A        1132            inc     r2
03A3 BA00D0    1133            cjne    r2,#0x00,L019004?
03A6 0B        1134            inc     r3
03A7 8000      1135            sjmp    L019004?
03A9           1136   L019008?:
03A9 22        1137            ret
03AA           1138   ;------------------------------------------------------------
03AA           1139   ;Allocation info for local variables in function 'main'
03AA           1140   ;------------------------------------------------------------
03AA           1141   ;------------------------------------------------------------
03AA           1142   ;        main.c:3: void main (void)
03AA           1143   ;        -----------------------------------------
03AA           1144   ;         function main
03AA           1145   ;        -----------------------------------------
03AA           1146   _main:
03AA           1147   ;        main.c:5: P3M0=0;
03AA 75C600    1148            mov     _P3M0,#0x00
03AD           1149   ;        main.c:6: P3M1=0;
03AD 75C700    1150            mov     _P3M1,#0x00
03B0           1151   ;        main.c:7: while(1)
03B0           1152   L020002?:
03B0           1153   ;        main.c:9: blink();
03B0 120000    1154            lcall   _blink
03B3 8000      1155            sjmp    L020002?
03B5           1156            rseg R_CSEG
03B5           1157   
0000           1158            rseg R_XINIT
0000           1159   
0000           1160            rseg R_CONST
0000           1161   
0003           1162            CSEG
0003           1163   
0003           1164   end
